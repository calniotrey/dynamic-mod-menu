namespace = dmm_keyboard
#
country_event = {
	id = dmm_keyboard.0
	is_triggered_only = yes
	hide_window = yes
	immediate = {
		dmm_keyboard_get_idle_country = yes
		event_target:dmm_keyboard_country = {
			dmm_keyboard_get_idle_leader = yes
			event_target:dmm_keyboard_leader = {
				save_event_target_as = dmm_keyboard_current_leader
				set_variable = {
					which = dmm_keyboard_name_length
					value = 0
				}
				set_name = ""
				remove_leader_flag = dmm_keyboard_idle
			}
			create_leader = {
				class = general
				species = event_target:dmm_global_species
				immortal = yes
				name = ""
				effect = {
					save_global_event_target_as = dmm_keyboard_dummy_leader
				}
			}
			set_variable = {
				which = dmm_keyboard_spaces_amount
				value = 0
			}
		}
		country_event = {
			id = dmm_keyboard.100
		}
	}
}

#THIS = player/country pressing the button
country_event = {
	id = dmm_keyboard.100
	is_triggered_only = yes
	title = "dmm_keyboard.100.name"
	desc = "dmm_keyboard.100.desc"
	diplomatic = yes
	custom_gui = "dmm_keyboard"
	option = {
		name = dmm.100.close
		custom_gui = "dmm_dummy_button"		#TODO free
	}
	option = {
		name = "dmm_keyboard_capslock"
		custom_gui = "dmm_keyboard_capslock"
		hidden_effect = {
			event_target:dmm_keyboard_country = {
				if = {
					limit = {
						has_country_flag = dmm_keyboad_capslock
					}
					remove_country_flag = dmm_keyboad_capslock
				}
				else = {
					set_country_flag = dmm_keyboad_capslock
				}
			}
			country_event = {
				id = dmm_keyboard.100
			}
		}
	}
	option = {
		name = "dmm_keyboard_a"
		custom_gui = "dmm_keyboard_a"
		is_dialog_only = yes
		response_text = "dmm_keyboard_a_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardA]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_b"
		custom_gui = "dmm_keyboard_b"
		is_dialog_only = yes
		response_text = "dmm_keyboard_b_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardB]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_c"
		custom_gui = "dmm_keyboard_c"
		is_dialog_only = yes
		response_text = "dmm_keyboard_c_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardC]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_d"
		custom_gui = "dmm_keyboard_d"
		is_dialog_only = yes
		response_text = "dmm_keyboard_d_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardD]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_e"
		custom_gui = "dmm_keyboard_e"
		is_dialog_only = yes
		response_text = "dmm_keyboard_e_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardE]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_f"
		custom_gui = "dmm_keyboard_f"
		is_dialog_only = yes
		response_text = "dmm_keyboard_f_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardF]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_g"
		custom_gui = "dmm_keyboard_g"
		is_dialog_only = yes
		response_text = "dmm_keyboard_g_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardG]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_h"
		custom_gui = "dmm_keyboard_h"
		is_dialog_only = yes
		response_text = "dmm_keyboard_h_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardH]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_i"
		custom_gui = "dmm_keyboard_i"
		is_dialog_only = yes
		response_text = "dmm_keyboard_i_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardI]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_j"
		custom_gui = "dmm_keyboard_j"
		is_dialog_only = yes
		response_text = "dmm_keyboard_j_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardJ]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_k"
		custom_gui = "dmm_keyboard_k"
		is_dialog_only = yes
		response_text = "dmm_keyboard_k_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardK]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_l"
		custom_gui = "dmm_keyboard_l"
		is_dialog_only = yes
		response_text = "dmm_keyboard_l_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardL]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_m"
		custom_gui = "dmm_keyboard_m"
		is_dialog_only = yes
		response_text = "dmm_keyboard_m_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardM]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_n"
		custom_gui = "dmm_keyboard_n"
		is_dialog_only = yes
		response_text = "dmm_keyboard_n_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardN]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_o"
		custom_gui = "dmm_keyboard_o"
		is_dialog_only = yes
		response_text = "dmm_keyboard_o_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardO]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_p"
		custom_gui = "dmm_keyboard_p"
		is_dialog_only = yes
		response_text = "dmm_keyboard_p_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardP]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_q"
		custom_gui = "dmm_keyboard_q"
		is_dialog_only = yes
		response_text = "dmm_keyboard_q_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardQ]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_r"
		custom_gui = "dmm_keyboard_r"
		is_dialog_only = yes
		response_text = "dmm_keyboard_r_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardR]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_s"
		custom_gui = "dmm_keyboard_s"
		is_dialog_only = yes
		response_text = "dmm_keyboard_s_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardS]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_t"
		custom_gui = "dmm_keyboard_t"
		is_dialog_only = yes
		response_text = "dmm_keyboard_t_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardT]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_u"
		custom_gui = "dmm_keyboard_u"
		is_dialog_only = yes
		response_text = "dmm_keyboard_u_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardU]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_v"
		custom_gui = "dmm_keyboard_v"
		is_dialog_only = yes
		response_text = "dmm_keyboard_v_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardV]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_w"
		custom_gui = "dmm_keyboard_w"
		is_dialog_only = yes
		response_text = "dmm_keyboard_w_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardW]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_x"
		custom_gui = "dmm_keyboard_x"
		is_dialog_only = yes
		response_text = "dmm_keyboard_x_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardX]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_y"
		custom_gui = "dmm_keyboard_y"
		is_dialog_only = yes
		response_text = "dmm_keyboard_y_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardY]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_z"
		custom_gui = "dmm_keyboard_z"
		is_dialog_only = yes
		response_text = "dmm_keyboard_z_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace][dmm_keyboard_country.GetKeyboardZ]"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_a_shift"
		custom_gui = "dmm_keyboard_a_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_a_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]A"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_b_shift"
		custom_gui = "dmm_keyboard_b_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_b_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]B"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_c_shift"
		custom_gui = "dmm_keyboard_c_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_c_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]C"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_d_shift"
		custom_gui = "dmm_keyboard_d_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_d_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]D"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_e_shift"
		custom_gui = "dmm_keyboard_e_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_e_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]E"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_f_shift"
		custom_gui = "dmm_keyboard_f_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_f_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]F"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_g_shift"
		custom_gui = "dmm_keyboard_g_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_g_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]G"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_h_shift"
		custom_gui = "dmm_keyboard_h_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_h_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]H"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_i_shift"
		custom_gui = "dmm_keyboard_i_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_i_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]I"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_j_shift"
		custom_gui = "dmm_keyboard_j_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_j_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]J"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_k_shift"
		custom_gui = "dmm_keyboard_k_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_k_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]K"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_l_shift"
		custom_gui = "dmm_keyboard_l_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_l_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]L"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_m_shift"
		custom_gui = "dmm_keyboard_m_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_m_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]M"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_n_shift"
		custom_gui = "dmm_keyboard_n_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_n_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]N"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_o_shift"
		custom_gui = "dmm_keyboard_o_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_o_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]O"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_p_shift"
		custom_gui = "dmm_keyboard_p_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_p_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]P"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_q_shift"
		custom_gui = "dmm_keyboard_q_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_q_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]Q"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_r_shift"
		custom_gui = "dmm_keyboard_r_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_r_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]R"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_s_shift"
		custom_gui = "dmm_keyboard_s_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_s_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]S"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_t_shift"
		custom_gui = "dmm_keyboard_t_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_t_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]T"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_u_shift"
		custom_gui = "dmm_keyboard_u_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_u_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]U"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_v_shift"
		custom_gui = "dmm_keyboard_v_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_v_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]V"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_w_shift"
		custom_gui = "dmm_keyboard_w_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_w_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]W"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_x_shift"
		custom_gui = "dmm_keyboard_x_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_x_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]X"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_y_shift"
		custom_gui = "dmm_keyboard_y_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_y_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]Y"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_z_shift"
		custom_gui = "dmm_keyboard_z_shift"
		is_dialog_only = yes
		response_text = "dmm_keyboard_z_shift_response"
		hidden_effect = {
			dmm_keyboard_add_letter = yes
			event_target:dmm_keyboard_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName]"
			}
			event_target:dmm_keyboard_current_leader = {
				set_name = "[dmm_keyboard_current_leader.GetName][This.GetKeyboardSpace]Z"
			}
			event_target:dmm_keyboard_country = {
				set_variable = {
					which = dmm_keyboard_spaces_amount
					value = 0
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_space"
		custom_gui = "dmm_keyboard_space"
		is_dialog_only = yes
		response_text = "[dmm_keyboard_current_leader.GetName]"
		hidden_effect = {
			# if = {
			# 	limit = {
			# 		event_target:dmm_keyboard_country = {
			# 			check_variable = {
			# 				which = dmm_keyboard_spaces_amount
			# 				value = 0
			# 			}
			# 		}
			# 	}
			# 	# first time adding a space
			# 	event_target:dmm_keyboard_country = {
			# 		set_leader = event_target:dmm_keyboard_current_leader
			# 	}
			# }
			event_target:dmm_keyboard_country = {
				set_leader = event_target:dmm_keyboard_current_leader
			}
			event_target:dmm_keyboard_country = {
				change_variable = {
					which = dmm_keyboard_spaces_amount
					value = 1
				}
			}
		}
	}
	option = {
		name = "dmm_keyboard_backspace"
		custom_gui = "dmm_keyboard_backspace"
		is_dialog_only = yes
		response_text = "[dmm_keyboard_country.ruler.GetName]"
		allow = {
			hidden_trigger = {
				OR = {
					event_target:dmm_keyboard_current_leader = {
						check_variable = {
							which = dmm_keyboard_name_length
							value > 0
						}
					}
					event_target:dmm_keyboard_country = {
						check_variable = {
							which = dmm_keyboard_spaces_amount
							value > 0
						}
					}
				}
			}
		}
		hidden_effect = {
			if = {
				limit = {
					event_target:dmm_keyboard_country = {
						check_variable = {
							which = dmm_keyboard_spaces_amount
							value > 0
						}
					}
				}
				event_target:dmm_keyboard_country = {
					subtract_variable = {
						which = dmm_keyboard_spaces_amount
						value = 1
					}
				}
				if = {
					limit = {
						event_target:dmm_keyboard_country = {
							check_variable = {
								which = dmm_keyboard_spaces_amount
								value = 0
							}
						}
						event_target:dmm_keyboard_current_leader = {
							check_variable = {
								which = dmm_keyboard_name_length
								value > 0
							}
						}
					}
					# get the leader that should be ruler
					event_target:dmm_keyboard_current_leader = {
						subtract_variable = {
							which = dmm_keyboard_name_length
							value = 1
						}
						dmm_keyboard_get_previous_leader = yes
						change_variable = {
							which = dmm_keyboard_name_length
							value = 1
						}
					}
				}
			}
			else = {
				event_target:dmm_keyboard_current_leader = {
					set_name = "[dmm_keyboard_country.ruler.GetName]"
				}
				dmm_keyboard_remove_letter = yes
				if = {
					limit = {
						event_target:dmm_keyboard_country = {
							check_variable = {
								which = dmm_keyboard_spaces_amount
								value > 0
							}
						}
					}
					event_target:dmm_keyboard_country = {
						set_leader = event_target:dmm_keyboard_current_leader
					}
				}
			}
		}
		# log = "Current = [dmm_keyboard_current_leader.GetName] - [dmm_keyboard_current_leader.dmm_keyboard_name_length]"
		# log = "Ruler = [dmm_keyboard_country.ruler.GetName] - [dmm_keyboard_country.ruler.dmm_keyboard_name_length]"
		# log = "------------------"
	}
	option = {
		name = dmm.100.close
		custom_gui = "dmm_dummy_button"
		default_hide_option = yes
	}
}
